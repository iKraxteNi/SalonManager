@page "/analysispage"
@using System.Globalization
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json
@using SalonManager.Shared.ResponsesDTOs

@inject HttpClient Http

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-3">
            <RadzenCard class="w-100 mb-4">

                <RadzenLabel Text="Dochód całkowity" Style="vertical-align: middle;text-align: center; display:flex; flex-direction:column;" />

            </RadzenCard>
            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Data="@monthlyRevenuesReverse" CategoryProperty="Date" Title="Przychód" ValueProperty="Revenue">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>

                <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                <RadzenValueAxis Formatter="@FormatAsPLN">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Przychód w PLN" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>

    </div>
</div>

<div class="rz-p-0 rz-text-align-center " >
    <RadzenCheckBox @bind-Value=@showDataLabels Name="dataLabels" />
    <RadzenLabel Text="Widok danych" Component="dataLabels"  Style=" margin-left: 10px; vertical-align: middle;" />
</div>

<div class="container">
    <div class="row">
        <div class="col-sm-12  my-3 ">
            <RadzenCard class="w-100 mb-4">

                <RadzenLabel Text="Dochód z poszczególnych usług" Style=" vertical-align: middle; text-align: center; display:flex; flex-direction:column; " />

            </RadzenCard>
            <RadzenChart>
                <RadzenDonutSeries Data="@serviceRevenuesReverse" CategoryProperty="Service" Title="Suma" ValueProperty="Revenue">

                    <ChildContent>
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />

                    </ChildContent>

                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Przychód</div>
                            <div>z poszczególnych </div>
                            <div>usług </div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
                <RadzenValueAxis Formatter="@FormatAsPLN" />
            </RadzenChart>
        </div>
    </div>
</div>

@code {
    bool smooth = true;
    bool showDataLabels = false;

    IList<AppointmentDto> appointmentsAdd = new List<AppointmentDto>();

    IList<CustomerGetDTO> customers;
    IList<ServiceAllPageDTO> services;

    class DataRevenue
    {
        public string Date { get; set; }
        public decimal Revenue { get; set; }
    }
    IEnumerable<DataRevenue> monthlyRevenues = new List<DataRevenue>();
    IEnumerable<DataRevenue> monthlyRevenuesReverse;

    class DataRevenueService
    {
        public string Service { get; set; }
        public decimal Revenue { get; set; }
    }

    IEnumerable<DataRevenueService> serviceRevenues = new List<DataRevenueService>();
    IEnumerable<DataRevenueService> serviceRevenuesReverse;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();


        customers = await Http.GetFromJsonAsync<List<CustomerGetDTO>>("api/customer/getAll");
        services = await Http.GetFromJsonAsync<List<ServiceAllPageDTO>>("api/service/getAll");



       DateTime start = new DateTime(DateTime.Today.Year, 1, 1, 0, 0, 0); // current year
      // DateTime start = DateTime.Now.AddYears(-1) ;// from now to same date last year 
        DateTime end = DateTime.Now;

        var queryToday = new Dictionary<string, string>
            {
                ["StartTime"] = start.ToString("MM/dd/yyyy HH:mm"),
                ["EndTime"] = end.ToString("MM/dd/yyyy HH:mm")
            };

        appointmentsAdd = await Http.GetFromJsonAsync<List<AppointmentDto>>(QueryHelpers.AddQueryString("api/appointment/GetDate", queryToday));

        var revenues = from appointment in appointmentsAdd
                       group appointment by new { Month = appointment.Start.Month, ServiceId = appointment.ServiceId } into appointmentGroup
                       join service in services on appointmentGroup.Key.ServiceId equals service.Id
                       let servicePrice = service.Price
                       select new { Month = appointmentGroup.Key.Month, Revenue = appointmentGroup.Count() * servicePrice };

        monthlyRevenues = from revenue in revenues
                          group revenue by revenue.Month into revenueGroup
                          select new DataRevenue { Date = new DateTime(2023, revenueGroup.Key, 1).ToString("yyyy-MM-dd"), Revenue = revenueGroup.Sum(r => r.Revenue) };

        monthlyRevenuesReverse = monthlyRevenues.Reverse();




        // kod dla serviceRevenuesReverse
        var serviceRevenuesGrouped = from appointment in appointmentsAdd
                                     group appointment by appointment.ServiceId into appointmentGroup
                                     join service in services on appointmentGroup.Key equals service.Id
                                     let servicePrice = service.Price
                                     select new { ServiceId = appointmentGroup.Key, Revenue = appointmentGroup.Count() * servicePrice };

        serviceRevenues = from revenue in serviceRevenuesGrouped
                          group revenue by revenue.ServiceId into revenueGroup
                          select new DataRevenueService { Service = services.First(s => s.Id == revenueGroup.Key).Name, Revenue = revenueGroup.Sum(r => r.Revenue) };

        serviceRevenuesReverse = serviceRevenues.Reverse();

    }

    string FormatAsPLN(object value)
    {
        return ((double)value).ToString(" 0.00  PLN");
    }



    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM");
        }

        return string.Empty;
    }
}

