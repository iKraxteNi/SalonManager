@page "/"

@using Microsoft.AspNetCore.WebUtilities
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using SalonManager.Shared.ResponsesDTOs



@inject HttpClient Http

<PageTitle>Index</PageTitle>



@page "/appointments"

<style>
    table {
        border-collapse: revert;
        border-spacing: 0;
        margin: -100 auto;
        border: 5px solid purple;
        text-align: center;
        min-width: 130px;
        border-radius: 10px;
    }

        table th, table td {
            border-left: 0.5px solid #baa718;
            min-width: 130px;
            border-right: 0.5px solid #baa718;
            border-radius: 5px
        }

        table th {
            border-top: 0.25px solid #baa718;
            min-width: 130px;
            border-bottom: 0.25px solid #baa718;
        }

        table td {
            border-bottom: 0.25px solid #baa718;
            min-width: 130px;
        }
</style>



<RadzenCard class="my-4">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            @if (appointmentsToday.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th colspan="3"><h1>Plan na dzisiaj</h1></th>
                        </tr>
                        <tr>
                            <th>Klient</th>
                            <th>Godziny</th>
                            <th>Usługa</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in appointmentsToday)
                        {
                            <tr>
                                <td>@appointment.FullNameCastomer</td>
                                <td>@appointment.Start.ToString("hh:mm tt")  -  @appointment.End.ToString("hh:mm tt")  </td>
                                <td>@appointment.ServiceName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Brak planowanych wizyt na dzisiaj.</p>
            }
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">

            @if (appointmentsTomorrow.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th colspan="3"><h1>Plan na jutro</h1></th>
                        </tr>
                        <tr>
                            <th>Klient</th>
                            <th>Godziny</th>
                            <th>Usługa</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in appointmentsTomorrow)
                        {
                            <tr>
                                <td>@appointment.FullNameCastomer</td>
                                <td>@appointment.Start.ToString("hh:mm tt")  -  @appointment.End.ToString("hh:mm tt")   </td>
                                <td>@appointment.ServiceName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Brak planowanych wizyt na jutro.</p>
            }
        </RadzenStack>

    </RadzenStack>
</RadzenCard>


@code {


    IList<AppointmentDto> appointmentsToday = new List<AppointmentDto>();
    IList<AppointmentDto> appointmentsTomorrow = new List<AppointmentDto>();

    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        timer = new Timer(async (state) => await LoadData(), null, TimeSpan.FromSeconds(600), TimeSpan.FromSeconds(600));
    }

    private async Task LoadData()
    {
        DateTime start = DateTime.Today;
        DateTime end = DateTime.Today;

        var queryToday = new Dictionary<string, string>
            {
                ["StartTime"] = start.ToString("MM/dd/yyyy HH:mm"),
                ["EndTime"] = end.ToString("MM/dd/yyyy HH:mm")
            };

        appointmentsToday = await Http.GetFromJsonAsync<List<AppointmentDto>>(QueryHelpers.AddQueryString("api/appointment/GetDate", queryToday));

        DateTime start1 = DateTime.Today.AddDays(1);
        DateTime end1 = DateTime.Today.AddDays(1);

        var queryTomorrow = new Dictionary<string, string>
            {
                ["StartTime"] = start1.ToString("MM/dd/yyyy HH:mm"),
                ["EndTime"] = end1.ToString("MM/dd/yyyy HH:mm")
            };

        appointmentsTomorrow = await Http.GetFromJsonAsync<List<AppointmentDto>>(QueryHelpers.AddQueryString("api/appointment/GetDate", queryTomorrow));


       // StateHasChanged();
    }


}