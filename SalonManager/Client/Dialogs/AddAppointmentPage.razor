@using Microsoft.AspNetCore.WebUtilities
@using Radzen.Blazor.Rendering
@using SalonManager.Shared.ResponsesDTOs



@inject Radzen.DialogService DialogService

@inject HttpClient Http

<RadzenTemplateForm   TItem="AppointmentDto" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Klient" />
        </div>
        <div class="col">
            <RadzenCard>
                <h4 class="mb-4">Wybierz klienta</h4>
                <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@customers @bind-Value=@model.CustomerId
                                TextProperty="FullNameCastomer" ValueProperty="Id" Class="w-100" Name="Customer" />
            </RadzenCard>

            <RadzenNumericRangeValidator Component="Customer" Min="1" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Usługa" />
        </div>
        <div class="col">
            <RadzenCard>
                <h4 class="mb-4">Wybierz usługę</h4>
                <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@services @bind-Value=@model.ServiceId
                                 TextProperty="Name" ValueProperty="Id"  Class="w-100" />
            </RadzenCard>

            <RadzenNumericRangeValidator Component="Customer" Min="1" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Notatka" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Note" Name="Note" Class="w-100"/>

        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Component="Start" Text="Proszę podać czas rozpoczęcia" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="Proszę podać czas zakończenia" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>



@code {


    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }

    AppointmentDto model = new AppointmentDto();
    AppointmentDto appointmentsAdd1 = new AppointmentDto();
    IList<AppointmentDto> appointmentsAdd = new List<AppointmentDto>();
    DateTime EndLast;

    IList<CustomerGetDTO> customers;
    IList<ServiceAllPageDTO> services;
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();


        customers = await Http.GetFromJsonAsync<List<CustomerGetDTO>>("api/customer/getAll");
        services = await Http.GetFromJsonAsync<List<ServiceAllPageDTO>>("api/service/getAll");



        DateTime start = Start;
        DateTime end = End;

        var queryToday = new Dictionary<string, string>
            {
                ["StartTime"] = start.ToString("MM/dd/yyyy HH:mm"),
                ["EndTime"] = end.ToString("MM/dd/yyyy HH:mm")
            };

        appointmentsAdd = await Http.GetFromJsonAsync<List<AppointmentDto>>(QueryHelpers.AddQueryString("api/appointment/GetDate", queryToday));

        if (0 != appointmentsAdd.Count)
        {
            appointmentsAdd1 = appointmentsAdd.Last();
            EndLast = appointmentsAdd1?.End ?? default(DateTime);
        }
        else
        {
            EndLast = default;
        }



    }

    protected override void OnParametersSet()
    {
        if (EndLast == default)
        {
            model.Start = Start.AddHours(7);
        }
        else { model.Start = EndLast; };

        model.End = End.AddDays(-1);
        //model.Id = 0;
    }



    async Task SendData(AppointmentDto model)
    {
        await Http.PostAsJsonAsync($"api/appointment/editadd", model);
    }

    void OnSubmit(AppointmentDto model)
    {

        SendData(model);
        DialogService.Close(model);
    }
    //void OnServiceSelected(ChangeEventArgs args)
    //{ @*@onchange="OnServiceSelected"*@
    //    if (int.TryParse(args.Value.ToString(), out int serviceId))
    //    {
    //        var service = services.FirstOrDefault(s => s.Id == serviceId);
    //        if (service != null)
    //        {
    //            End = model.Start.AddMinutes(service.Duration);
    //            OnParametersSet();
    //        }
    //    }
    //}
}